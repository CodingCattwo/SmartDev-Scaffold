buildscript {
    repositories {
        mavenCentral()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://dl.bintray.com/ethereum/maven/" }
        mavenLocal()

    }
    dependencies {
        classpath 'com.webank:solc-gradle-plugin:1.0.0-SNAPSHOT'
    }
}
plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'solc-gradle-plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = '${generator.group}'
version = '1.0.0-SNAPSHOT'

solc{
    pkg = '${package}.contracts'
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    maven { url "https://oss.sonatype.org/service/local/staging/deploy/maven2"}
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    compile ('org.fisco-bcos.java-sdk:java-sdk:2.7.0')
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources  {
            srcDir 'src/main/resources'
        }
    }
}
test {
    useJUnitPlatform()
}
bootJar {
    destinationDir file('dist')
    archiveName project.name + '-exec.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'
    exclude '**/*.yml'
    doLast {
        copy {
            from file('src/main/resources')
            into 'dist/config/'
        }
    }
}

clean {
    println "delete ${projectDir}/dist"
    delete "${projectDir}/dist"
}
