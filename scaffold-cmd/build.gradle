buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }

        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.3.9.RELEASE")
    }
}
plugins{
    id 'org.springframework.boot' version '2.3.9.RELEASE'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
mainClassName = 'com.webank.scaffold.cmd.Main'

group 'com.webank'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    mavenLocal()
    mavenCentral()
}


configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    provided
    compile.extendsFrom(provided)
}


dependencies {
    implementation ('org.springframework.boot:spring-boot-starter-web'){
       // exclude module: "org.springframework.boot:spring-boot-starter-logging"
    }
    // https://mvnrepository.com/artifact/info.picocli/picocli
    compile group: 'info.picocli', name: 'picocli', version: '4.6.1'
    compile project(":scaffold-core")
}
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources  {
            srcDir 'src/main/resources'
        }
    }
}

bootJar {
    destinationDir file('dist')
    archiveName project.name + '-exec.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'
    exclude '**/*.yml'
    doLast {
        copy {
            from file('src/main/resources')
            into 'dist/config/'
        }
    }
}

clean {
    println "delete ${projectDir}/dist"
    delete "${projectDir}/dist"
}

